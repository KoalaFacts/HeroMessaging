name: CI

on:
  push:  # Trigger on every commit to any branch
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance benchmarks'
        required: false
        default: false
        type: boolean
      run_integration_tests:
        description: 'Run integration tests'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  NUGET_XMLDOC_MODE: skip

jobs:
  # Job for detecting changes to determine test scope
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      core-changed: ${{ steps.changes.outputs.core }}
      tests-changed: ${{ steps.changes.outputs.tests }}
      storage-changed: ${{ steps.changes.outputs.storage }}
      serialization-changed: ${{ steps.changes.outputs.serialization }}
      observability-changed: ${{ steps.changes.outputs.observability }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            core:
              - 'src/HeroMessaging/**'
              - 'src/HeroMessaging.Abstractions/**'
            tests:
              - 'tests/**'
              - '!tests/**/*.md'
            storage:
              - 'src/HeroMessaging.Storage.*/**'
            serialization:
              - 'src/HeroMessaging.Serialization.*/**'
            observability:
              - 'src/HeroMessaging.Observability.*/**'
            workflows:
              - '.github/workflows/**'
            docs-only:
              - '**/*.md'
              - 'docs/**'
              - '!src/**'
              - '!tests/**'
              - '!.github/**'

  # Matrix job for unit tests across platforms and frameworks
  unit-tests:
    name: Unit Tests (${{ matrix.os }}, ${{ matrix.framework }}, ${{ matrix.configuration }})
    needs: detect-changes
    if: needs.detect-changes.outputs.docs-only != 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        framework: [net6.0, net8.0, net9.0]
        configuration: [Debug, Release]
        exclude:
          # Reduce matrix size for non-critical combinations
          - os: macos-latest
            configuration: Debug
          - framework: net6.0
            configuration: Debug
            os: macos-latest
        include:
          # Add netstandard2.0 tests on Windows only
          - os: windows-latest
            framework: netstandard2.0
            configuration: Release
          # Add performance configuration
          - os: ubuntu-latest
            framework: net8.0
            configuration: Release
            run-benchmarks: true

    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.x
          dotnet-quality: 'ga'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', 'global.json', 'Directory.Build.*') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore --verbosity minimal

      - name: Build solution
        run: dotnet build --configuration ${{ matrix.configuration }} --no-restore --verbosity minimal

      - name: Run unit tests
        run: |
          dotnet test \
            --configuration ${{ matrix.configuration }} \
            --no-build \
            --verbosity minimal \
            --framework ${{ matrix.framework }} \
            --filter "Category=Unit" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./test-results \
            --logger "trx;LogFileName=unit-tests-${{ matrix.os }}-${{ matrix.framework }}.trx" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Run performance benchmarks
        if: matrix.run-benchmarks == true && (github.event.inputs.run_performance_tests == 'true' || github.event_name == 'schedule')
        run: |
          dotnet run \
            --project tests/HeroMessaging.Benchmarks \
            --configuration Release \
            --framework ${{ matrix.framework }} \
            -- --exporters json \
            --artifacts ./benchmark-results

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.framework }}-${{ matrix.configuration }}
          path: |
            ./test-results/**/*.trx
            ./test-results/**/*.xml
          retention-days: 7

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: matrix.run-benchmarks == true && always()
        with:
          name: benchmark-results-${{ matrix.os }}-${{ matrix.framework }}
          path: ./benchmark-results/**/*.json
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest' && matrix.framework == 'net8.0' && matrix.configuration == 'Release'
        with:
          directory: ./test-results
          flags: unit-tests
          fail_ci_if_error: false

  # Integration tests with real dependencies
  integration-tests:
    name: Integration Tests (${{ matrix.framework }}, ${{ matrix.test-category }})
    needs: [detect-changes, unit-tests]
    if: needs.detect-changes.outputs.docs-only != 'true' && (github.event.inputs.run_integration_tests == 'true' || github.event.inputs.run_integration_tests == null)
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]  # Service containers only work properly on Linux
        framework: [net6.0, net8.0, net9.0]
        test-category: [Storage, Serialization, Observability, Pipeline]

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: heromessaging_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: HeroMessaging123!
          ACCEPT_EULA: Y
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P HeroMessaging123! -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 1433:1433

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', 'global.json', 'Directory.Build.*') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Wait for services
        run: |
          echo "Waiting for database services to be ready..."
          sleep 30

      - name: Run integration tests
        env:
          PostgreSQL__ConnectionString: "Host=localhost;Port=5432;Database=heromessaging_test;Username=postgres;Password=postgres"
          SqlServer__ConnectionString: "Server=localhost,1433;Database=heromessaging_test;User Id=sa;Password=HeroMessaging123!;TrustServerCertificate=true"
          Redis__ConnectionString: "localhost:6379"
        run: |
          dotnet test \
            --configuration Release \
            --no-build \
            --framework ${{ matrix.framework }} \
            --filter "Category=Integration&Category=${{ matrix.test-category }}" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./test-results \
            --logger "trx;LogFileName=integration-${{ matrix.test-category }}-${{ matrix.framework }}.trx" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-results-${{ matrix.test-category }}-${{ matrix.framework }}
          path: |
            ./test-results/**/*.trx
            ./test-results/**/*.xml
          retention-days: 7

  # Contract tests for API compatibility
  contract-tests:
    name: Contract Tests (${{ matrix.os }}, ${{ matrix.framework }})
    needs: detect-changes
    if: needs.detect-changes.outputs.core-changed == 'true' || needs.detect-changes.outputs.tests-changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        framework: [net6.0, net8.0, net9.0]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', 'global.json', 'Directory.Build.*') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run contract tests
        run: |
          dotnet test tests/HeroMessaging.Contract.Tests/HeroMessaging.Contract.Tests.csproj \
            --configuration Release \
            --no-build \
            --framework ${{ matrix.framework }} \
            --filter "Category=Contract" \
            --logger "trx;LogFileName=contract-tests-${{ matrix.os }}-${{ matrix.framework }}.trx" \
            --results-directory ./test-results

      - name: Upload contract test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: contract-test-results-${{ matrix.os }}-${{ matrix.framework }}
          path: ./test-results/**/*.trx

  # Performance regression detection
  performance-regression:
    name: Performance Regression Analysis
    needs: [detect-changes, unit-tests]
    if: github.event_name == 'schedule' || github.event.inputs.run_performance_tests == 'true' || (needs.detect-changes.outputs.core-changed == 'true' && github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build benchmarks
        run: dotnet build tests/HeroMessaging.Benchmarks --configuration Release --no-restore

      - name: Download baseline benchmarks
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: performance-baseline
          path: ./benchmark-baseline

      - name: Run performance benchmarks
        run: |
          dotnet run \
            --project tests/HeroMessaging.Benchmarks \
            --configuration Release \
            -- --exporters json \
            --artifacts ./benchmark-results \
            --job short

      - name: Analyze performance regression
        run: |
          dotnet run \
            --project tests/HeroMessaging.Benchmarks \
            --configuration Release \
            -- --analyze-regression \
            --current ./benchmark-results \
            --baseline ./benchmark-baseline \
            --threshold 10

      - name: Upload current benchmarks as baseline
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          name: performance-baseline
          path: ./benchmark-results/**/*.json
          retention-days: 90

      - name: Comment performance results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = './benchmark-results/regression-report.md';
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Performance Analysis\n\n${report}`
              });
            }

  # Quality gates and final validation
  quality-gates:
    name: Quality Gates & Validation
    needs: [unit-tests, integration-tests, contract-tests]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: ./all-test-results

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate combined coverage report
        run: |
          reportgenerator \
            -reports:"./all-test-results/**/coverage.cobertura.xml" \
            -targetdir:"./coverage-report" \
            -reporttypes:"Html;Badges;TextSummary" \
            -classfilters:"-System.*;-Microsoft.*"

      - name: Read coverage summary
        id: coverage
        run: |
          if [ -f "./coverage-report/Summary.txt" ]; then
            COVERAGE=$(grep "Line coverage:" ./coverage-report/Summary.txt | grep -o '[0-9.]*%' | head -1 | sed 's/%//')
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Coverage: $COVERAGE%"
          else
            echo "coverage=0" >> $GITHUB_OUTPUT
            echo "No coverage data found"
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage-report/**/*
          retention-days: 30

      - name: Check quality gates
        run: |
          echo "Checking quality gates..."

          # Check coverage threshold
          COVERAGE=${{ steps.coverage.outputs.coverage }}
          MIN_COVERAGE=80

          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below minimum threshold $MIN_COVERAGE%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets minimum threshold $MIN_COVERAGE%"
          fi

          # Check test results
          UNIT_TESTS_PASSED="${{ needs.unit-tests.result }}"
          INTEGRATION_TESTS_PASSED="${{ needs.integration-tests.result }}"
          CONTRACT_TESTS_PASSED="${{ needs.contract-tests.result }}"

          echo "Unit tests: $UNIT_TESTS_PASSED"
          echo "Integration tests: $INTEGRATION_TESTS_PASSED"
          echo "Contract tests: $CONTRACT_TESTS_PASSED"

          if [[ "$UNIT_TESTS_PASSED" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi

          if [[ "$INTEGRATION_TESTS_PASSED" != "success" && "$INTEGRATION_TESTS_PASSED" != "skipped" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi

          if [[ "$CONTRACT_TESTS_PASSED" != "success" && "$CONTRACT_TESTS_PASSED" != "skipped" ]]; then
            echo "❌ Contract tests failed"
            exit 1
          fi

          echo "✅ All quality gates passed"

      - name: Update status badges
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Updating status badges..."
          # This would typically update README badges or external services

  # Build release packages for main branch (used by create-release workflow)
  build-release-packages:
    name: Build Release Packages
    needs: quality-gates
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Generate build number
        id: build-number
        run: |
          # Extract base version from project file
          BASE_VERSION=$(grep -oP '<Version>\K[^<]+' src/HeroMessaging/HeroMessaging.csproj || echo "0.0.0")

          # Extract and sanitize branch name (replace / with -)
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/\//-/g')

          # Build number components
          BUILD_DATE=$(date -u +%Y%m%d)
          RUN_NUMBER=${{ github.run_number }}
          SHORT_SHA=${GITHUB_SHA:0:7}

          # Construct build number: branch-date.run.hash
          BUILD_NUMBER="${BRANCH_NAME}-${BUILD_DATE}.${RUN_NUMBER}.${SHORT_SHA}"
          FULL_VERSION="${BASE_VERSION}-ci.${BUILD_NUMBER}"

          echo "build-number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "full-version=${FULL_VERSION}" >> $GITHUB_OUTPUT

          echo "📋 Build Information:"
          echo "  Base Version: ${BASE_VERSION}"
          echo "  Branch: ${BRANCH_NAME}"
          echo "  Date: ${BUILD_DATE}"
          echo "  Run Number: ${RUN_NUMBER}"
          echo "  Git Hash: ${SHORT_SHA}"
          echo "  Build Number: ${BUILD_NUMBER}"
          echo "  Full Version: ${FULL_VERSION}"

      - name: Pack NuGet packages
        run: |
          mkdir -p ./release-packages

          dotnet pack src/HeroMessaging/HeroMessaging.csproj \
            --configuration Release \
            --no-build \
            --output ./release-packages \
            -p:PackageVersion=${{ steps.build-number.outputs.full-version }} \
            -p:IncludeSymbols=true \
            -p:SymbolPackageFormat=snupkg

          dotnet pack src/HeroMessaging.Abstractions/HeroMessaging.Abstractions.csproj \
            --configuration Release \
            --no-build \
            --output ./release-packages \
            -p:PackageVersion=${{ steps.build-number.outputs.full-version }} \
            -p:IncludeSymbols=true \
            -p:SymbolPackageFormat=snupkg

      - name: List packages
        run: |
          echo "📦 Packages created:"
          ls -lh ./release-packages/
          echo ""
          echo "Commit SHA: ${GITHUB_SHA}"
          echo "Short SHA: ${GITHUB_SHA:0:7}"
          echo "Build Number: ${{ steps.build-number.outputs.build-number }}"
          echo "Full Version: ${{ steps.build-number.outputs.full-version }}"

      - name: Upload release packages
        uses: actions/upload-artifact@v4
        with:
          name: release-packages-${{ github.sha }}
          path: ./release-packages/*
          retention-days: 90  # Keep for 90 days for releases

      - name: Upload release packages (latest)
        uses: actions/upload-artifact@v4
        with:
          name: release-packages-latest
          path: ./release-packages/*
          retention-days: 90
