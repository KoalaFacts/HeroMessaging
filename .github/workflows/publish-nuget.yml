name: Publish to NuGet

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  id-token: write  # Required for NuGet trusted publishing

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel publish jobs

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            IS_PRERELEASE="${{ github.event.release.prerelease }}"
          else
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          fi

          # Remove 'v' prefix if present
          VERSION=${VERSION#v}

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is-prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          echo "Publishing version: ${VERSION}"
          echo "Is prerelease: ${IS_PRERELEASE}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            10.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal --filter "Category=Unit"
        timeout-minutes: 5

  build-packages:
    name: Build NuGet Packages
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
            10.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Pack NuGet packages
        run: |
          dotnet pack src/HeroMessaging/HeroMessaging.csproj \
            --configuration Release \
            --no-build \
            --output ./packages \
            -p:PackageVersion=${{ needs.validate.outputs.version }} \
            -p:IncludeSymbols=true \
            -p:SymbolPackageFormat=snupkg

          dotnet pack src/HeroMessaging.Abstractions/HeroMessaging.Abstractions.csproj \
            --configuration Release \
            --no-build \
            --output ./packages \
            -p:PackageVersion=${{ needs.validate.outputs.version }} \
            -p:IncludeSymbols=true \
            -p:SymbolPackageFormat=snupkg

      - name: List packages
        run: ls -lh ./packages/

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./packages/*.nupkg
          retention-days: 30

      - name: Upload symbols
        uses: actions/upload-artifact@v4
        with:
          name: nuget-symbols
          path: ./packages/*.snupkg
          retention-days: 30

  publish-nuget:
    name: Publish to NuGet.org
    needs: [validate, build-packages]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: nuget-production
      url: https://www.nuget.org/packages/HeroMessaging

    steps:
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./packages

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Option 1: Trusted Publishing (Recommended)
      # Requires setup at https://www.nuget.org/account/Packages
      # See: https://devblogs.microsoft.com/nuget/introducing-nuget-package-signing/
      - name: Publish to NuGet (Trusted Publishing)
        if: false  # Set to true when trusted publishing is configured
        run: |
          dotnet nuget push "./packages/*.nupkg" \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate \
            --no-symbols

      # Option 2: API Key (Fallback)
      # Store NUGET_API_KEY in GitHub Secrets
      - name: Publish to NuGet (API Key)
        if: true  # Set to false when using trusted publishing
        run: |
          dotnet nuget push "./packages/*.nupkg" \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate \
            --no-symbols
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  publish-github-packages:
    name: Publish to GitHub Packages
    needs: [validate, build-packages]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./packages

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Publish to GitHub Packages
        run: |
          dotnet nuget push "./packages/*.nupkg" \
            --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release-notes:
    name: Create Release Notes
    needs: [validate, publish-nuget, publish-github-packages]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update release notes
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate.outputs.version }}';
            const releaseNotes = `
            ## NuGet Packages Published

            - ✅ [HeroMessaging v${version}](https://www.nuget.org/packages/HeroMessaging/${version})
            - ✅ [HeroMessaging.Abstractions v${version}](https://www.nuget.org/packages/HeroMessaging.Abstractions/${version})

            ## Installation

            \`\`\`bash
            dotnet add package HeroMessaging --version ${version}
            \`\`\`

            ## Links

            - [NuGet Gallery](https://www.nuget.org/packages/HeroMessaging/)
            - [GitHub Packages](https://github.com/${{ github.repository }}/packages)
            - [Documentation](https://github.com/${{ github.repository }})

            ---
            ${context.payload.release.body || ''}
            `;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: releaseNotes
            });
