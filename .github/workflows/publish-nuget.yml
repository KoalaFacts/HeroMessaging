name: Publish to NuGet

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write
  id-token: write  # Required for NuGet trusted publishing

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel publish jobs

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
      - name: Extract version from tag
        id: version
        run: |
          TAG="${{ github.event.release.tag_name }}"
          IS_PRERELEASE="${{ github.event.release.prerelease }}"

          # Remove 'v' prefix if present
          VERSION=${TAG#v}

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is-prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          echo "Publishing version: ${VERSION}"
          echo "Is prerelease: ${IS_PRERELEASE}"
          echo "Release URL: ${{ github.event.release.html_url }}"

      - name: Verify release assets exist
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }}
            });

            const assets = release.data.assets;
            const nupkgAssets = assets.filter(a => a.name.endsWith('.nupkg'));
            const snupkgAssets = assets.filter(a => a.name.endsWith('.snupkg'));

            console.log(`Found ${nupkgAssets.length} .nupkg files`);
            console.log(`Found ${snupkgAssets.length} .snupkg files`);

            if (nupkgAssets.length === 0) {
              core.setFailed('❌ No .nupkg files found in release assets!');
              core.setFailed('Make sure the create-release workflow completed successfully.');
              return;
            }

            console.log('✅ Release assets validated');
            console.log('\nPackages to publish:');
            nupkgAssets.forEach(asset => {
              console.log(`  - ${asset.name} (${asset.size} bytes)`);
            });

  download-packages:
    name: Download Release Packages
    needs: validate-release
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Download release assets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { mkdir } = require('fs/promises');

            // Create packages directory
            await mkdir('./packages', { recursive: true });

            // Get release assets
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }}
            });

            const assets = release.data.assets.filter(a =>
              a.name.endsWith('.nupkg') || a.name.endsWith('.snupkg')
            );

            // Download each asset
            for (const asset of assets) {
              console.log(`Downloading ${asset.name}...`);

              const response = await github.rest.repos.getReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id,
                headers: {
                  accept: 'application/octet-stream'
                }
              });

              fs.writeFileSync(`./packages/${asset.name}`, Buffer.from(response.data));
              console.log(`✅ Downloaded ${asset.name}`);
            }

      - name: List downloaded packages
        run: |
          echo "📦 Downloaded packages:"
          ls -lh ./packages/

      - name: Upload packages as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-packages
          path: ./packages/*
          retention-days: 30

  publish-nuget:
    name: Publish to NuGet.org
    needs: [validate-release, download-packages]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: production
      url: https://www.nuget.org/packages/HeroMessaging

    steps:
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: ./packages

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 8.0.x

      # Trusted Publishing - Secure, keyless authentication via OIDC
      # Setup instructions: .github/NUGET_TRUSTED_PUBLISHING.md
      - name: Publish to NuGet.org
        run: |
          dotnet nuget push "./packages/*.nupkg" \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate \
            --no-symbols

      - name: Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## ✅ Published to NuGet.org

          **Version**: ${{ needs.validate-release.outputs.version }}

          ### 📦 Packages Published

          - [HeroMessaging v${{ needs.validate-release.outputs.version }}](https://www.nuget.org/packages/HeroMessaging/${{ needs.validate-release.outputs.version }})
          - [HeroMessaging.Abstractions v${{ needs.validate-release.outputs.version }}](https://www.nuget.org/packages/HeroMessaging.Abstractions/${{ needs.validate-release.outputs.version }})

          ### Installation

          \`\`\`bash
          dotnet add package HeroMessaging --version ${{ needs.validate-release.outputs.version }}
          \`\`\`
          EOF

  publish-github-packages:
    name: Publish to GitHub Packages
    needs: [validate-release, download-packages]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: ./packages

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 8.0.x

      - name: Publish to GitHub Packages
        run: |
          dotnet nuget push "./packages/*.nupkg" \
            --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## ✅ Published to GitHub Packages

          **Version**: ${{ needs.validate-release.outputs.version }}

          ### 📦 View Packages

          - [GitHub Packages](https://github.com/${{ github.repository }}/packages)

          ### Installation

          \`\`\`bash
          dotnet nuget add source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json -n github
          dotnet add package HeroMessaging --version ${{ needs.validate-release.outputs.version }}
          \`\`\`
          EOF

  update-release-notes:
    name: Update Release Notes
    needs: [validate-release, publish-nuget, publish-github-packages]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Update release description
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';

            // Get current release
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }}
            });

            // Add publication status to release notes
            const updatedBody = `${release.data.body}

---

## ✅ Publication Status

- ✅ **NuGet.org**: [View packages](https://www.nuget.org/packages/HeroMessaging/${version})
- ✅ **GitHub Packages**: [View packages](https://github.com/${{ github.repository }}/packages)

**Published**: ${new Date().toISOString()}

---

_Published automatically via [Publish to NuGet workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})_
`;

            // Update release
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              body: updatedBody
            });

            console.log('✅ Release notes updated');
