name: Coverage Report

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Run Tests with Coverage
      run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --settings coverlet.runsettings --verbosity normal

    - name: Generate Coverage Report
      run: reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:Html;Badges;TextSummary

    - name: Check Coverage Threshold
      run: |
        # Extract coverage percentage from report
        coverage=$(grep -oP 'Line coverage: \K[0-9.]+' coverage-report/Summary.txt || echo "0")
        echo "Current coverage: ${coverage}%"

        # Check if coverage meets 80% threshold
        if (( $(echo "$coverage >= 80" | bc -l) )); then
          echo "✅ Coverage threshold met: ${coverage}% >= 80%"
        else
          echo "❌ Coverage threshold not met: ${coverage}% < 80%"
          exit 1
        fi

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v5
      with:
        name: coverage-report
        path: coverage-report/

    - name: Upload Coverage Badge
      uses: actions/upload-artifact@v5
      with:
        name: coverage-badge
        path: coverage-report/badge_*.svg